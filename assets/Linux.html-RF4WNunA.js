import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as a,f as n}from"./app-QtFXmfU1.js";const s="/Blog/assets/image-20240113161042823-kyYjn76g.png",i="/Blog/assets/image-20240306131443659-Nr9qQLnu.png",l="/Blog/assets/image-20240306135554334-77MrDqcq.png",d="/Blog/assets/image-20240306141447696-_KgmmmGg.png",r="/Blog/assets/image-20240306141635031-J3KCsHGj.png",p="/Blog/assets/image-20240306142141100-c1M_pe9Y.png",o="/Blog/assets/image-20240306142335731-7qkAng8N.png",c="/Blog/assets/image-20240306142756299-tD-0tZQ1.png",u="/Blog/assets/image-20240306142849525-jOZ6Tmqe.png",g="/Blog/assets/image-20240306142945879-ciy3aHlu.png",h="/Blog/assets/image-20240306143019494-7T-u4H5y.png",m="/Blog/assets/image-20240306144617120-x8BhxfaL.png",b="/Blog/assets/image-20240306145447088-1LPNZyy7.png",v="/Blog/assets/image-20240306145635679-BqTnoQiP.png",_="/Blog/assets/image-20240307142522130-KufWA2C0.png",f={},k=n('<h1 id="linux" tabindex="-1"><a class="header-anchor" href="#linux"><span>Linux</span></a></h1><h2 id="小知识" tabindex="-1"><a class="header-anchor" href="#小知识"><span>小知识</span></a></h2><ul><li>在Linux中实际上文件是没有后缀名这东西的，加后缀名只是为了便于区分。例如demo和demo.txt就可能是一样的。</li><li></li></ul><h2 id="_1-linux系统结构" tabindex="-1"><a class="header-anchor" href="#_1-linux系统结构"><span>1.Linux系统结构</span></a></h2><figure><img src="'+s+`" alt="image-20240113161042823" tabindex="0" loading="lazy"><figcaption>image-20240113161042823</figcaption></figure><p>对每个目录的简要解释</p><ul><li><p><strong>/bin</strong>： 存放系统的基本命令（如ls、cp、mv等）的目录，所有用户均能够使用</p></li><li><p><strong>/boot：</strong> 这里存放的是启动 Linux 时使用的一些核心文件</p></li><li><p><strong>/dev ：</strong> dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。<mark>在Linux中，万物皆文件</mark></p></li><li><p><strong>/etc：</strong> etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p></li><li><p><strong>/home</strong>： 用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</p></li><li><p><strong>/lib</strong>： lib 是 Library(库) 的缩写这个目录里存放着系统的共享库和内核模块，这些库文件为可执行程序提供所需的功能</p></li><li><p><strong>/media</strong>： linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p></li><li><p><strong>/mnt</strong>： 用于挂载临时文件系统，通常用于挂载其他分区或网络共享。</p></li><li><p><strong>/opt</strong>： opt 是 optional(可选) 的缩写，这是用于安装第三方软件的目录，通常这些软件不是通过包管理器安装的。</p></li><li><p><strong>/proc</strong>： proc 是 Processes(进程) 的缩写，/proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。 这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>/root</strong>： 该目录为系统管理员，也称作超级权限者的用户主目录。</p></li><li><p><strong>/sbin</strong>： s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序，通常只有管理员才能执行</p></li><li><p><strong>/srv</strong>： 该目录存放一些服务启动之后需要提取的数据。</p></li><li><p><strong>/sys</strong>：</p><p>也是一个虚拟文件系统，提供了内核的运行时信息，可用于与内核进行交互。</p></li><li><p><strong>/tmp</strong>： tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</p></li><li><p><strong>/usr</strong>： usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p></li><li><p><strong>/var</strong>： var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p></li><li><p>. ：代表当前的目录，也可以使用 ./ 来表示；</p></li><li><p>.. ：代表上一层目录，也可以 ../ 来代表。</p></li></ul><h2 id="_2-基本指令" tabindex="-1"><a class="header-anchor" href="#_2-基本指令"><span>2.基本指令</span></a></h2><blockquote><ul><li><p><strong>绝对路径：</strong> 路径的写法，由根目录 <strong>/</strong> 写起，例如： /usr/share/doc 这个目录。</p></li><li><p><strong>相对路径：</strong> 路径的写法，不是由 <strong>/</strong> 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成： <strong>cd ../man</strong> 这就是相对路径的写法。</p></li><li><p><strong>指令选项：</strong></p><p>Linux的指令的选项是可以合并的，例如：ls -a然后ls -l 可以合并为ls -al 一起执行</p></li></ul></blockquote><ul><li>ls（ list files）: 列出目录及文件名</li><li>cd（ change directory）：切换目录</li><li>pwd（ print work directory）：显示目前的目录</li><li>mkdir（ make directory）：创建一个新的目录</li><li>rmdir（ remove directory）：删除一个空的目录</li><li>cp（ copy file）: 复制文件或目录</li><li>rm（ remove）: 删除文件或目录</li><li>mv（ move file）: 移动文件与目录，或修改文件与目录的名称</li></ul><h3 id="_2-1-pwd指令" tabindex="-1"><a class="header-anchor" href="#_2-1-pwd指令"><span>2.1 pwd指令</span></a></h3><p>基本语法：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">pwd</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>功能：描述当前工作目录的<strong>绝对路径</strong>（从根目录出发）</p><h3 id="_2-2-ls指令" tabindex="-1"><a class="header-anchor" href="#_2-2-ls指令"><span>2.2 ls指令</span></a></h3><p>基本语法：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ls</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>目录或者文件<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-a（-all）</td><td>显示当前目录所有的文件和目录（下列选项同理），包括以.开头的隐藏的文件和目录</td></tr><tr><td>-A</td><td>同上，但不列出.（表示当前目录）以及.. 表示当前目录的父目录</td></tr><tr><td>-l</td><td>以列表的形式显示信息</td></tr><tr><td>-S</td><td>根据文件和文件夹的大小排序，从大到小</td></tr><tr><td>-t</td><td>按文件修改时间排序，最近修改的文件位于顶部</td></tr></tbody></table><figure><img src="`+i+`" alt="image-20240306131443659" tabindex="0" loading="lazy"><figcaption>image-20240306131443659</figcaption></figure><h3 id="_2-3-cd指令" tabindex="-1"><a class="header-anchor" href="#_2-3-cd指令"><span>2.3 cd指令</span></a></h3><p>基本语法：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数可以填相对路径和绝对路径</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 回到上一级目录</span>
<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span> 
<span class="token comment"># 回到家目录-1</span>
<span class="token builtin class-name">cd</span> 
<span class="token comment"># 回到家目录-2</span>
<span class="token builtin class-name">cd</span> ~
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-mkdir指令" tabindex="-1"><a class="header-anchor" href="#_2-4-mkdir指令"><span>2.4 mkdir指令</span></a></h3><p>基本语法：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 要创建的目录
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-p</td><td>创建多级目录</td></tr><tr><td></td><td></td></tr></tbody></table><p>不加选项的mkdir指令只能创建<em><strong>一个</strong></em>空目录</p><h3 id="_2-5-rmdir指令" tabindex="-1"><a class="header-anchor" href="#_2-5-rmdir指令"><span>2.5 rmdir指令</span></a></h3><p>基本语法：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">rmdir</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 要删除的空目录
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>rmdir 只能够删除<strong>一个空目录</strong></p><h3 id="_2-6-touch指令" tabindex="-1"><a class="header-anchor" href="#_2-6-touch指令"><span>2.6 touch指令</span></a></h3><p>用来创建一个空文件</p><p>基本语法：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">touch</span> 文件名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>touch hello.txt -&gt; 在当前目录创建一个hello.txt文件</p><h3 id="_2-7-cp指令" tabindex="-1"><a class="header-anchor" href="#_2-7-cp指令"><span>2.7 cp指令</span></a></h3><p>cp指令拷贝文件到指定目录</p><p>基本用法</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># source即想要被复制的文件或文件夹</span>
<span class="token function">cp</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token builtin class-name">source</span> targetFolder
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-r</td><td>递归复制整个文件夹（例如cp -r demo/ demo-r/，则会将整个demo文件夹拷一份到demo-r下。即demo-r文件夹下会出现一个demo文件夹）</td></tr><tr><td></td><td></td></tr></tbody></table><p>当我们复制文件的时候可能会有一些同名文件的情况，在cp指令前面加上\\，即\\cp就能够强制覆盖不提示。</p><h3 id="_2-8-rm指令" tabindex="-1"><a class="header-anchor" href="#_2-8-rm指令"><span>2.8. rm指令</span></a></h3><p>基本用法：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">rm</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 要删除的文件或目录
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-r</td><td>递归删除整个文件夹(删除文件夹必须带此选项)</td></tr><tr><td>-f</td><td>强制删除不提示</td></tr></tbody></table><h3 id="_2-9-mv指令" tabindex="-1"><a class="header-anchor" href="#_2-9-mv指令"><span>2.9 mv指令</span></a></h3><p>mv指令用于移动或重命名文件和目录</p><p>基本用法</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 重命名(注意好像不能够通过路径的方式描述文件然后重命名)</span>
<span class="token function">mv</span> oldFileName newFileName
<span class="token comment"># 移动文件或文件夹</span>
<span class="token function">mv</span> /temp/movefile /targetFolder
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+l+`" alt="image-20240306135554334" tabindex="0" loading="lazy"><figcaption>image-20240306135554334</figcaption></figure><h3 id="_2-10-cat指令" tabindex="-1"><a class="header-anchor" href="#_2-10-cat指令"><span>2.10 cat指令</span></a></h3><p>cat指令查看文件内容</p><p>基本语法：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cat</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 要查看的文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-n</td><td>显示行号</td></tr></tbody></table><p>实际上cat指令通常配合more或者less指令来工作</p><h3 id="_2-11-more指令" tabindex="-1"><a class="header-anchor" href="#_2-11-more指令"><span>2.11 more指令</span></a></h3><p>直接输出对应指令就行了，他会自动执行，无需清除前面看似剩下的指令或者按回车</p><table><thead><tr><th>操作</th><th>功能</th></tr></thead><tbody><tr><td>空白键（space）</td><td>向下翻一页</td></tr><tr><td>Enter</td><td>向下翻一行</td></tr><tr><td>q</td><td>代表立刻离开more，不再显示文件内容</td></tr><tr><td>=</td><td>输出当前行的行号</td></tr><tr><td>：f</td><td>输出文件名和当前行的行号</td></tr></tbody></table><h3 id="_2-12-less指令" tabindex="-1"><a class="header-anchor" href="#_2-12-less指令"><span>2.12 less指令</span></a></h3><p>底部会有一个：标志，代表我们可以使用下面这些操作指令</p><table><thead><tr><th>操作</th><th>功能说明</th></tr></thead><tbody><tr><td>空白键</td><td>回车向下翻一行，空格翻整个终端的大小</td></tr><tr><td>PageDown</td><td>向下翻一页</td></tr><tr><td>PageUp</td><td>向上翻一页</td></tr><tr><td>/字串</td><td>输入字串后要按下回车，按n是向下查找，按N向上查找</td></tr><tr><td>？字串</td><td>与上面的方向相反</td></tr><tr><td>q</td><td>退出less程序</td></tr></tbody></table><h3 id="_2-13-echo指令" tabindex="-1"><a class="header-anchor" href="#_2-13-echo指令"><span>2.13 echo指令</span></a></h3><p>输出内容到控制台</p><p>基本语法：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 输出内容
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+d+`" alt="image-20240306141447696" tabindex="0" loading="lazy"><figcaption>image-20240306141447696</figcaption></figure><h3 id="_2-14-head指令" tabindex="-1"><a class="header-anchor" href="#_2-14-head指令"><span>2.14 head指令</span></a></h3><p>head指令用于显示文件的开头部分内容，默认情况下head指令显示文件的前十行内容</p><p>基本语法：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 显示文件的前十行内容</span>
<span class="token function">head</span> <span class="token function">file</span>
<span class="token comment"># 显示文件的前五行内容</span>
<span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">5</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+`" alt="image-20240306141635031" tabindex="0" loading="lazy"><figcaption>image-20240306141635031</figcaption></figure><h3 id="_2-15-tail指令" tabindex="-1"><a class="header-anchor" href="#_2-15-tail指令"><span>2.15 tail指令</span></a></h3><p>tail指令用于输出文件中尾部的内容，默认情况下tail指令显示文件的最后十行内容</p><p>基本语法：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 查看文件尾10行内容</span>
<span class="token function">tail</span> <span class="token function">file</span>
<span class="token comment"># 查看文件尾n行内容</span>
<span class="token function">tail</span> <span class="token parameter variable">-n</span> n <span class="token function">file</span>
<span class="token comment"># 实时追踪该文档的所有更新</span>
<span class="token function">tail</span> <span class="token parameter variable">-f</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意了执行tail -f file 这个命令后终端会被占用！</p><figure><img src="`+p+'" alt="image-20240306142141100" tabindex="0" loading="lazy"><figcaption>image-20240306142141100</figcaption></figure><figure><img src="'+o+`" alt="image-20240306142335731" tabindex="0" loading="lazy"><figcaption>image-20240306142335731</figcaption></figure><p><em><strong>退出方式即Ctrl + C</strong></em></p><h3 id="_2-16-指令和-指令" tabindex="-1"><a class="header-anchor" href="#_2-16-指令和-指令"><span>2.16 &gt;指令和&gt;&gt;指令</span></a></h3><p>前一个是输出重定向覆盖，后一个是输出重定向追加</p><p>基本语法：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 如果文件不存在就会新建一个</span>
<span class="token function">ls</span> <span class="token parameter variable">-l</span> <span class="token operator">&gt;</span> <span class="token function">file</span> <span class="token comment"># 列表的内容写入到文件中（覆盖写入）</span>
<span class="token function">ls</span> <span class="token parameter variable">-al</span> <span class="token operator">&gt;&gt;</span> <span class="token function">file</span> <span class="token comment"># 列表的内容追加写到文件中，即写到文件末尾</span>
<span class="token function">cat</span> file_1 <span class="token operator">&gt;</span> file_2 <span class="token comment"># 将文件1的内容覆盖到文件2（&gt;&gt;则为追加）</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;内容&quot;</span> <span class="token operator">&gt;&gt;</span> <span class="token function">file</span> <span class="token comment"># 向文件尾部追加。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+c+'" alt="image-20240306142756299" tabindex="0" loading="lazy"><figcaption>image-20240306142756299</figcaption></figure><p>执行了ls -l &gt; test-tail.txt 指令后</p><figure><img src="'+u+'" alt="image-20240306142849525" tabindex="0" loading="lazy"><figcaption>image-20240306142849525</figcaption></figure><figure><img src="'+g+'" alt="image-20240306142945879" tabindex="0" loading="lazy"><figcaption>image-20240306142945879</figcaption></figure><figure><img src="'+h+`" alt="image-20240306143019494" tabindex="0" loading="lazy"><figcaption>image-20240306143019494</figcaption></figure><h3 id="_2-17-ln" tabindex="-1"><a class="header-anchor" href="#_2-17-ln"><span>2.17 ln</span></a></h3><p>软连接也称符号连接，类似于windows中的快捷方式，主要存放了连接其他文件的路径</p><p>基本语法：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 相当于在当前目录下创建一个快捷方式</span>
<span class="token function">ln</span> <span class="token parameter variable">-s</span> 原文件或目录 软连接名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+m+`" alt="image-20240306144617120" tabindex="0" loading="lazy"><figcaption>image-20240306144617120</figcaption></figure><p>但观察pwd发现好像看到的并非是所指向的目录，这需要注意一下。</p><h3 id="_2-18-history指令" tabindex="-1"><a class="header-anchor" href="#_2-18-history指令"><span>2.18 history指令</span></a></h3><p>用于查看已经执行过的历史指令，也可以执行历史指令</p><p>基本用法：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 显示最近执行的所有指令</span>
<span class="token function">history</span>
<span class="token comment"># 显示最近执行的十条指令</span>
<span class="token function">history</span> <span class="token number">10</span>
<span class="token comment"># 执行历史编号为10的指令</span>
<span class="token operator">!</span><span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-linux包管理" tabindex="-1"><a class="header-anchor" href="#_3-linux包管理"><span>3.Linux包管理</span></a></h2><h4 id="_3-1-wget" tabindex="-1"><a class="header-anchor" href="#_3-1-wget"><span>3.1 wget</span></a></h4><p><mark>wget</mark>命令是一个在Linux/Unix系统中用来从网络下载文件的工具。wget URL即可。这样能够直接把文件给下过来</p><h4 id="_3-2-apt-get命令" tabindex="-1"><a class="header-anchor" href="#_3-2-apt-get命令"><span>3.2 apt-get命令</span></a></h4><p>apt-get是debian，ubuntu发行版的包管理工具，与红帽中的yum工具非常类似，适用于deb包管理式的操作系统，主要用于自动从互联网的软件仓库中搜索、安装、升级、卸载软件或操作系统。apt-get在安装包的时候是根据/etc/apt/sources.list文件中指定的源来寻找的安装包，你可以根据自己的需要对这个文件进行修改。</p><p>apt-get命令一般需要root权限执行，所以一般跟着sudo命令。</p><ul><li>sudo apt-get install package <mark>安装包</mark></li><li>sudo apt-get install package - - reinstall 重新安装包</li><li>sudo apt-get -f install 修复安装&quot;-f = ——fix-missing&quot;</li><li>sudo apt-get remove package 删除包</li><li>sudo apt-get remove package - - purge 删除包，包括删除配置文件等</li><li>sudo apt-get autoremove package 删除包及其依赖的软件包</li><li>sudo apt-get update <mark>更新源</mark></li><li>sudo apt-get upgrade <mark>更新已安装的包</mark></li><li>sudo apt-get dist-upgrade 升级系统</li><li>sudo apt-get dselect-upgrade 使用 dselect 升级</li><li>sudo apt-get build-dep package 安装相关的编译环境</li><li>sudo apt-get source package 下载该包的源代码</li><li>sudo apt-get clean &amp;&amp; sudo apt-get autoclean 清理无用的包</li><li>sudo apt-get check 检查是否有损坏的依赖</li></ul><h2 id="_4-用户管理" tabindex="-1"><a class="header-anchor" href="#_4-用户管理"><span>4.用户管理</span></a></h2><ul><li><p>新增用户</p><p>useradd your_usr_name</p><blockquote><p>此方式不会自动添加home目录，在Ubuntu中需要使用adduser your_usr_name。</p></blockquote></li><li><p>指定/修改密码</p><p>passwd ur_usr_name</p></li><li><p>删除用户</p><p>userdel ur_usr_name（不删除家目录等，完全删除可以用sudo userdel -r ur_usr_name）</p></li><li><p>查询用户信息</p><p>id usr_name</p></li><li><p>切换用户</p><p>在操作Linux的过程中，如果当前用户的权限不够，可以通过<mark>su - usr_name</mark>指令，切换到最高权限用户即root</p><p>su - usr_name</p><blockquote><p>注意：</p><ul><li>从高权限用户切换到权限低的用户，不需要输入密码，反之需要</li><li>当需要返回到<code>原来</code>用户时，使用exit/logout指令</li></ul></blockquote></li><li><p>查看当前用户</p><p>whoami</p></li></ul><h2 id="_5-查找指令" tabindex="-1"><a class="header-anchor" href="#_5-查找指令"><span>5.查找指令</span></a></h2><h3 id="_5-1-find指令" tabindex="-1"><a class="header-anchor" href="#_5-1-find指令"><span>5.1 find指令</span></a></h3><p>从指定目录向下递归地遍历其各个子目录，将满足条件地文件或者目录显示在终端</p><p><em><strong>基本语法</strong></em></p><p>find [搜索范围] [选项]</p><blockquote><p>搜索范围即写开始目录，例如 / /home /usr</p></blockquote><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-name&lt;查询方式&gt;</td><td>按照指定的文件或文件夹名查找模式去查找</td></tr><tr><td>-user&lt;用户名&gt;</td><td>查找属于指定用户名的所有文件或文件夹</td></tr><tr><td>-size&lt;文件大小&gt;</td><td>按照指定的文件大小查找（注意+n为大于，-n为小于，n为等于）</td></tr></tbody></table><p>Eg1：根据文件名称查找 /home目录下的hello.txt文件。</p><p>Eg2：查找整个系统下大于200M（单位有K,M,G）的文件：find / -size +200M</p><h3 id="_5-2-plocate指令" tabindex="-1"><a class="header-anchor" href="#_5-2-plocate指令"><span>5.2 plocate指令</span></a></h3><p>locate指令可以快速定位文件路径。locate指令利用事先建立的系统中所有文件名称及路径的locate数据库实现快速定位给定的文件。Locate指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新locate时刻。</p><p><em><strong>基本语法</strong></em></p><p>locate given_file</p><p><em><strong>特别说明</strong></em></p><p>由于locate指令基于数据库进行查询，所以第一次运行前，必须使用updatedb指令创建locate数据库</p><p>Eg：</p><h3 id="_5-3-grep指令和管道符号" tabindex="-1"><a class="header-anchor" href="#_5-3-grep指令和管道符号"><span>5.3 grep指令和管道符号 |</span></a></h3><blockquote><p>grep的作用为：过滤查找。</p><p>管道符 &quot;|&quot;，表示将前一个命令的处理结果输出传递给后面的命令处理</p></blockquote><p><em><strong>基本语法</strong></em></p><p>grep [选项] 查找内容 源文件</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-n</td><td>显示匹配行以及行号</td></tr><tr><td>-i</td><td>忽略字母大小写</td></tr></tbody></table><p>Eg1: cat /opt/hello.txt | grep &quot;yes&quot;</p><p>Eg2: grep -n &quot;yes&quot; /opt/hello.txt</p><h2 id="_6-压缩和解压" tabindex="-1"><a class="header-anchor" href="#_6-压缩和解压"><span>6.压缩和解压</span></a></h2><h3 id="_6-1gzip-gunzip" tabindex="-1"><a class="header-anchor" href="#_6-1gzip-gunzip"><span>6.1gzip/gunzip</span></a></h3><p>gzip用于压缩文件,gunzip用于解压缩文件</p><p><em><strong>基本语法</strong></em></p><p>gzip file</p><p>gunzip file.gz</p><h3 id="_6-2-zip-unzip" tabindex="-1"><a class="header-anchor" href="#_6-2-zip-unzip"><span>6.2 zip/unzip</span></a></h3><p>zip用于压缩文件，unzip用于解压缩文件</p><h3 id="_6-3-tar指令" tabindex="-1"><a class="header-anchor" href="#_6-3-tar指令"><span>6.3 tar指令</span></a></h3><p>tar指令时打包命令，最后打包后的文件时.tar.gz格式</p><h2 id="_7-时间日期类" tabindex="-1"><a class="header-anchor" href="#_7-时间日期类"><span>7.时间日期类</span></a></h2><h3 id="_7-1date" tabindex="-1"><a class="header-anchor" href="#_7-1date"><span>7.1date</span></a></h3><figure><img src="`+b+'" alt="date" tabindex="0" loading="lazy"><figcaption>date</figcaption></figure><h3 id="_7-2-cal" tabindex="-1"><a class="header-anchor" href="#_7-2-cal"><span>7.2 cal</span></a></h3><figure><img src="'+v+`" alt="cal" tabindex="0" loading="lazy"><figcaption>cal</figcaption></figure><h2 id="_8-磁盘管理" tabindex="-1"><a class="header-anchor" href="#_8-磁盘管理"><span>8. 磁盘管理</span></a></h2><h3 id="_8-1-df" tabindex="-1"><a class="header-anchor" href="#_8-1-df"><span>8.1 df</span></a></h3><p>获取硬盘占用情况，以及剩余空间等信息</p><table><thead><tr><th>选项</th><th>参数</th></tr></thead><tbody><tr><td>-h</td><td>以人们比较容易阅读的GBytes，MBytes，KBytes等格式显示</td></tr><tr><td>-H</td><td>以M=1000K取代M=1024K的仅为方式</td></tr><tr><td>-k</td><td>以KBytes的容量显示各文件系统</td></tr><tr><td>-m</td><td>以MBytes的容量显示各文件系统</td></tr></tbody></table><h2 id="_9-内存管理" tabindex="-1"><a class="header-anchor" href="#_9-内存管理"><span>9.内存管理</span></a></h2><h3 id="_9-1-free" tabindex="-1"><a class="header-anchor" href="#_9-1-free"><span>9.1 free</span></a></h3><p>命令格式：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">free</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>-h</td><td>人性化的显示系统的内存占用情况</td></tr><tr><td>-b</td><td>以Byte单位显示内存使用情况</td></tr><tr><td>-k</td><td>以KB单位显示内存使用情况</td></tr><tr><td>-m</td><td>以MB单位显示内存使用情况</td></tr><tr><td>-g</td><td>以GB单位显示内存使用情况</td></tr><tr><td>-V</td><td>显示版本信息</td></tr><tr><td>-t</td><td>显示内存总和列</td></tr><tr><td>-s</td><td>持续观察内存使用情况</td></tr></tbody></table><figure><img src="`+_+`" alt="image-20240307142522130" tabindex="0" loading="lazy"><figcaption>image-20240307142522130</figcaption></figure><p>上述命令即每隔五秒查看一下内存占用情况，按下Ctrl+c即可退出</p><h3 id="_9-2-top" tabindex="-1"><a class="header-anchor" href="#_9-2-top"><span>9.2 top</span></a></h3><p><code>top</code>命令用于实时监视系统的进程和系统资源使用情况。它提供了一个交互式界面，显示了当前正在运行的进程列表以及它们消耗的系统资源。</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-c</td><td>显示完整的命令行而不仅仅是命令名</td></tr><tr><td>-d</td><td>设置屏幕刷新间隔，单位为秒</td></tr><tr><td>-p</td><td>显示指定进程ID（PID）的信息</td></tr><tr><td>-u</td><td>仅显示指定用户的进程</td></tr><tr><td>-n</td><td>设置top命令执行的次数后退出(不加此选项就会一直运行)</td></tr><tr><td>-i</td><td>不显示任何闲置或僵死进程</td></tr></tbody></table><h3 id="_9-3-ps" tabindex="-1"><a class="header-anchor" href="#_9-3-ps"><span>9.3 ps</span></a></h3><p><code>ps</code>命令是用于显示当前运行在系统中的进程状态的命令。它可以列出与当前终端或用户相关的进程，也可以显示系统中所有进程的信息。</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-e</td><td>显示系统中的所有进程</td></tr><tr><td>-u</td><td>显示特定用户的进程</td></tr><tr><td>-f</td><td>显示详细的进程信息</td></tr><tr><td>-aux</td><td>显示所有进程的详细信息，通常与grep命令一起使用以过滤结果</td></tr><tr><td>-l</td><td>显示更多关于进程的信息</td></tr></tbody></table><p>以下是<code>ps</code>命令的一些常用输出字段：</p><ul><li><code>PID</code>：进程ID。</li><li><code>TTY</code>：控制终端。</li><li><code>TIME</code>：CPU时间。</li><li><code>CMD</code>：命令名。</li></ul><p><code>ps -aux</code>是一个常用的Linux命令，用于显示系统中当前运行的进程信息。</p><ul><li><p><code>ps</code>: 表示进程状态（Process Status）。</p></li><li><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>-aux
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>: 是</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>ps
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令的选项，它有以下含义：</p><ul><li><code>a</code>: 显示所有用户的进程，而不仅仅是当前终端的进程。</li><li><code>u</code>: 显示详细的进程信息，包括进程的拥有者（用户）、CPU占用率、内存占用率等。</li><li><code>x</code>: 显示没有控制终端的进程。</li></ul></li></ul><p>综合起来，<code>ps -aux</code>命令会列出系统中所有进程的详细信息，包括进程的拥有者、PID（进程ID）、CPU占用率、内存占用率等。这对于了解系统的运行状态、查找特定进程以及进行系统调优非常有用。</p>`,171),x=[k];function y(z,L){return e(),a("div",null,x)}const q=t(f,[["render",y],["__file","Linux.html.vue"]]),P=JSON.parse('{"path":"/posts/Linux/Linux.html","title":"Linux","lang":"zh-CN","frontmatter":{"description":"Linux 小知识 在Linux中实际上文件是没有后缀名这东西的，加后缀名只是为了便于区分。例如demo和demo.txt就可能是一样的。 1.Linux系统结构 image-20240113161042823image-20240113161042823 对每个目录的简要解释 /bin： 存放系统的基本命令（如ls、cp、mv等）的目录，所有用户均能...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/Blog/posts/Linux/Linux.html"}],["meta",{"property":"og:title","content":"Linux"}],["meta",{"property":"og:description","content":"Linux 小知识 在Linux中实际上文件是没有后缀名这东西的，加后缀名只是为了便于区分。例如demo和demo.txt就可能是一样的。 1.Linux系统结构 image-20240113161042823image-20240113161042823 对每个目录的简要解释 /bin： 存放系统的基本命令（如ls、cp、mv等）的目录，所有用户均能..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-31T14:06:09.000Z"}],["meta",{"property":"article:author","content":"jianwen"}],["meta",{"property":"article:modified_time","content":"2024-03-31T14:06:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-31T14:06:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"jianwen\\",\\"url\\":\\"https://catlordx.github.io/Blog/\\"}]}"]]},"headers":[{"level":2,"title":"小知识","slug":"小知识","link":"#小知识","children":[]},{"level":2,"title":"1.Linux系统结构","slug":"_1-linux系统结构","link":"#_1-linux系统结构","children":[]},{"level":2,"title":"2.基本指令","slug":"_2-基本指令","link":"#_2-基本指令","children":[{"level":3,"title":"2.1 pwd指令","slug":"_2-1-pwd指令","link":"#_2-1-pwd指令","children":[]},{"level":3,"title":"2.2 ls指令","slug":"_2-2-ls指令","link":"#_2-2-ls指令","children":[]},{"level":3,"title":"2.3 cd指令","slug":"_2-3-cd指令","link":"#_2-3-cd指令","children":[]},{"level":3,"title":"2.4 mkdir指令","slug":"_2-4-mkdir指令","link":"#_2-4-mkdir指令","children":[]},{"level":3,"title":"2.5 rmdir指令","slug":"_2-5-rmdir指令","link":"#_2-5-rmdir指令","children":[]},{"level":3,"title":"2.6 touch指令","slug":"_2-6-touch指令","link":"#_2-6-touch指令","children":[]},{"level":3,"title":"2.7 cp指令","slug":"_2-7-cp指令","link":"#_2-7-cp指令","children":[]},{"level":3,"title":"2.8. rm指令","slug":"_2-8-rm指令","link":"#_2-8-rm指令","children":[]},{"level":3,"title":"2.9 mv指令","slug":"_2-9-mv指令","link":"#_2-9-mv指令","children":[]},{"level":3,"title":"2.10 cat指令","slug":"_2-10-cat指令","link":"#_2-10-cat指令","children":[]},{"level":3,"title":"2.11 more指令","slug":"_2-11-more指令","link":"#_2-11-more指令","children":[]},{"level":3,"title":"2.12 less指令","slug":"_2-12-less指令","link":"#_2-12-less指令","children":[]},{"level":3,"title":"2.13 echo指令","slug":"_2-13-echo指令","link":"#_2-13-echo指令","children":[]},{"level":3,"title":"2.14 head指令","slug":"_2-14-head指令","link":"#_2-14-head指令","children":[]},{"level":3,"title":"2.15 tail指令","slug":"_2-15-tail指令","link":"#_2-15-tail指令","children":[]},{"level":3,"title":"2.16 >指令和>>指令","slug":"_2-16-指令和-指令","link":"#_2-16-指令和-指令","children":[]},{"level":3,"title":"2.17 ln","slug":"_2-17-ln","link":"#_2-17-ln","children":[]},{"level":3,"title":"2.18 history指令","slug":"_2-18-history指令","link":"#_2-18-history指令","children":[]}]},{"level":2,"title":"3.Linux包管理","slug":"_3-linux包管理","link":"#_3-linux包管理","children":[]},{"level":2,"title":"4.用户管理","slug":"_4-用户管理","link":"#_4-用户管理","children":[]},{"level":2,"title":"5.查找指令","slug":"_5-查找指令","link":"#_5-查找指令","children":[{"level":3,"title":"5.1 find指令","slug":"_5-1-find指令","link":"#_5-1-find指令","children":[]},{"level":3,"title":"5.2 plocate指令","slug":"_5-2-plocate指令","link":"#_5-2-plocate指令","children":[]},{"level":3,"title":"5.3 grep指令和管道符号 |","slug":"_5-3-grep指令和管道符号","link":"#_5-3-grep指令和管道符号","children":[]}]},{"level":2,"title":"6.压缩和解压","slug":"_6-压缩和解压","link":"#_6-压缩和解压","children":[{"level":3,"title":"6.1gzip/gunzip","slug":"_6-1gzip-gunzip","link":"#_6-1gzip-gunzip","children":[]},{"level":3,"title":"6.2 zip/unzip","slug":"_6-2-zip-unzip","link":"#_6-2-zip-unzip","children":[]},{"level":3,"title":"6.3 tar指令","slug":"_6-3-tar指令","link":"#_6-3-tar指令","children":[]}]},{"level":2,"title":"7.时间日期类","slug":"_7-时间日期类","link":"#_7-时间日期类","children":[{"level":3,"title":"7.1date","slug":"_7-1date","link":"#_7-1date","children":[]},{"level":3,"title":"7.2 cal","slug":"_7-2-cal","link":"#_7-2-cal","children":[]}]},{"level":2,"title":"8. 磁盘管理","slug":"_8-磁盘管理","link":"#_8-磁盘管理","children":[{"level":3,"title":"8.1 df","slug":"_8-1-df","link":"#_8-1-df","children":[]}]},{"level":2,"title":"9.内存管理","slug":"_9-内存管理","link":"#_9-内存管理","children":[{"level":3,"title":"9.1 free","slug":"_9-1-free","link":"#_9-1-free","children":[]},{"level":3,"title":"9.2 top","slug":"_9-2-top","link":"#_9-2-top","children":[]},{"level":3,"title":"9.3 ps","slug":"_9-3-ps","link":"#_9-3-ps","children":[]}]}],"git":{"createdTime":1711893611000,"updatedTime":1711893969000,"contributors":[{"name":"jianwen","email":"shelly2140306@163.com","commits":2}]},"readingTime":{"minutes":14.03,"words":4208},"filePathRelative":"posts/Linux/Linux.md","localizedDate":"2024年3月31日","excerpt":"\\n<h2>小知识</h2>\\n<ul>\\n<li>在Linux中实际上文件是没有后缀名这东西的，加后缀名只是为了便于区分。例如demo和demo.txt就可能是一样的。</li>\\n<li></li>\\n</ul>\\n<h2>1.Linux系统结构</h2>\\n<figure><figcaption>image-20240113161042823</figcaption></figure>\\n<p>对每个目录的简要解释</p>\\n<ul>\\n<li>\\n<p><strong>/bin</strong>：\\n存放系统的基本命令（如ls、cp、mv等）的目录，所有用户均能够使用</p>\\n</li>\\n<li>\\n<p><strong>/boot：</strong>\\n这里存放的是启动 Linux 时使用的一些核心文件</p>\\n</li>\\n<li>\\n<p><strong>/dev ：</strong>\\ndev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。<mark>在Linux中，万物皆文件</mark></p>\\n</li>\\n<li>\\n<p><strong>/etc：</strong>\\netc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p>\\n</li>\\n<li>\\n<p><strong>/home</strong>：\\n用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</p>\\n</li>\\n<li>\\n<p><strong>/lib</strong>：\\nlib 是 Library(库) 的缩写这个目录里存放着系统的共享库和内核模块，这些库文件为可执行程序提供所需的功能</p>\\n</li>\\n<li>\\n<p><strong>/media</strong>：\\nlinux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p>\\n</li>\\n<li>\\n<p><strong>/mnt</strong>：\\n用于挂载临时文件系统，通常用于挂载其他分区或网络共享。</p>\\n</li>\\n<li>\\n<p><strong>/opt</strong>：\\nopt 是 optional(可选) 的缩写，这是用于安装第三方软件的目录，通常这些软件不是通过包管理器安装的。</p>\\n</li>\\n<li>\\n<p><strong>/proc</strong>：\\nproc 是 Processes(进程) 的缩写，/proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。\\n这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all\\n</code></pre></div></li>\\n<li>\\n<p><strong>/root</strong>：\\n该目录为系统管理员，也称作超级权限者的用户主目录。</p>\\n</li>\\n<li>\\n<p><strong>/sbin</strong>：\\ns 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序，通常只有管理员才能执行</p>\\n</li>\\n<li>\\n<p><strong>/srv</strong>：\\n该目录存放一些服务启动之后需要提取的数据。</p>\\n</li>\\n<li>\\n<p><strong>/sys</strong>：</p>\\n<p>也是一个虚拟文件系统，提供了内核的运行时信息，可用于与内核进行交互。</p>\\n</li>\\n<li>\\n<p><strong>/tmp</strong>：\\ntmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</p>\\n</li>\\n<li>\\n<p><strong>/usr</strong>：\\nusr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p>\\n</li>\\n<li>\\n<p><strong>/var</strong>：\\nvar 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p>\\n</li>\\n<li>\\n<p>. ：代表当前的目录，也可以使用 ./ 来表示；</p>\\n</li>\\n<li>\\n<p>.. ：代表上一层目录，也可以 ../ 来代表。</p>\\n</li>\\n</ul>","autoDesc":true}');export{q as comp,P as data};
