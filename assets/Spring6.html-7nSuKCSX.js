import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o as p,c as i,a as n,b as o,d as l,f as a}from"./app-LLMsEGQM.js";const c="/Blog/assets/image-20240106123047939-q1_L2Igu.png",u="/Blog/assets/image-20240208205014352-ywqEdMWu.png",r="/Blog/assets/image-20240208205227546-g0yelhI4.png",g="/Blog/assets/image-20240208205449675-zcn2SHjT.png",d="/Blog/assets/image-20240208205704187-7-oXxvma.png",k="/Blog/assets/image-20240208212322668-_rQykMS8.png",m="/Blog/assets/image-20240208213804849-Mlp-cVax.png",v="/Blog/assets/image-20240208220612047-GXranESN.png",b="/Blog/assets/image-20240208220754794-McRkcUSr.png",h="/Blog/assets/image-20240208222657605-AUvKZGVH.png",x={},w=a('<h1 id="spring6" tabindex="-1"><a class="header-anchor" href="#spring6"><span>Spring6</span></a></h1><p><img alt="Static Badge" src="https://img.shields.io/badge/license-MIT-blue"><img alt="Static Badge" src="https://img.shields.io/badge/version-1.0.0-grenn"><img alt="Static Badge" src="https://img.shields.io/badge/Spring_Framework-6.1.3-green"></p><ul><li>JDK : 17</li><li>Spring：6.1.3</li><li>IDEA : 2023.2.2</li><li>MAVEN ：3.8.8</li></ul>',3),f={href:"https://docs.spring.io/spring-framework/reference/index.html",target:"_blank",rel:"noopener noreferrer"},S=a('<h2 id="一、spring简述" tabindex="-1"><a class="header-anchor" href="#一、spring简述"><span>一、Spring简述</span></a></h2><p>事实上Spring这个词在不同的上下文中有着不同的含义，它可以用来指Spring Framework项目本身，它是一切的开始。</p><p>但随着时间的推移，Spring不断发展，其他Spring项目也建立在Spring框架之上，例如Spring MVC、Spring Boot、Spring Security等等。大多数情况下，当人们提及Spring的时候，往往指代的是整个项目系列。但在本文中我们重点关注Spring Framework本身，正如前面所说，Spring Framework是其他Spring项目的基石！</p><h3 id="_1-1-spring-framework简介" tabindex="-1"><a class="header-anchor" href="#_1-1-spring-framework简介"><span>1.1 Spring Framework简介</span></a></h3><figure><img src="'+c+'" alt="image-20240106123047939" tabindex="0" loading="lazy"><figcaption>image-20240106123047939</figcaption></figure><p>Why Spring？</p><ul><li><p>Spring 是一个开源免费的框架，轻量，且是非侵入式的。</p></li><li><p>IoC（控制反转）容器</p><p>Spring 使用了 IoC 容器，它负责对象的创建、组装和管理对象之间的依赖关系，这样可以降低组件之间的耦合度，并且使得应用程序更容易进行测试和维护。当程序使用了IoC容器，一个对象依赖的其它对象就会通过被动的方式传递进来，而不是让这个对象自己在内部创建所依赖的对象。</p></li><li><p>AOP（面向切面编程）支持</p><p>Spring 提供了强大的 AOP 支持，使得开发者可以将横切关注点（例如日志、事务管理等）从核心业务逻辑中分离出来，这样可以提高代码的模块化和可维护性。</p></li><li><p>声明式事务管理</p><p>Spring 提供了声明式的事务管理，使得开发者可以通过简单的配置来管理事务，而不需要在代码中硬编码事务逻辑。</p></li><li><p>模块化</p><p>Spring 被模块化地设计，开发者可以根据自己的需求选择需要的模块，例如 Spring Core、Spring MVC、Spring Data 等。</p></li></ul><h3 id="_1-2-创建第一个spring程序" tabindex="-1"><a class="header-anchor" href="#_1-2-创建第一个spring程序"><span>1.2 创建第一个Spring程序</span></a></h3><ul><li>首先用IDEA创建一个空项目</li></ul><figure><img src="'+u+'" alt="IDEA创建一个空项目" tabindex="0" loading="lazy"><figcaption>IDEA创建一个空项目</figcaption></figure><ul><li>接着在这个空项目中新建一个模块spring-study-01</li></ul><figure><img src="'+r+'" alt="spring-study-01" tabindex="0" loading="lazy"><figcaption>spring-study-01</figcaption></figure><ul><li>然后添加spring-context依赖，找到spring-study-001模块，然后打开该模块下的pom.xml文件夹，增添矩形区域内代码，然后点击箭头指向的图标，<mark>重新加载Maven项目</mark>引入依赖（jar包）</li></ul><figure><img src="'+g+'" alt="pom.xml配置" tabindex="0" loading="lazy"><figcaption>pom.xml配置</figcaption></figure><p>当加入spring context的依赖之后，会关联引入其他依赖：</p><figure><img src="'+d+`" alt="spring-context依赖" tabindex="0" loading="lazy"><figcaption>spring-context依赖</figcaption></figure><ul><li><em><strong>spring-aop</strong></em> ： 提供了对面向切面编程（AOP）的支持。这个模块包含了用于实现面向切面编程的相关功能和类。</li><li><em><strong>spring-beans</strong></em> ：提供了对 Bean 的管理和操作的支持。在 Spring 应用程序中，Bean 是被 Spring 容器管理的对象，它们通过依赖注入的方式来实现解耦和组件化。是IoC容器的核心</li><li><em><strong>spring-core</strong></em> ： Spring Framework 中最基础、最核心的模块之一，它提供了整个 Spring 框架的基础设施支持。spring-core包含了许多核心的类和接口，用于实现依赖注入、资源管理、类型转换等基本功能。</li><li><em><strong>spring-expression</strong></em> ： 用于支持 SpEL（Spring Expression Language）——Spring 表达式语言。SpEL 提供了在运行时对对象进行查询和操作的强大语言，通常用于配置文件、注解、XML 配置等地方。</li><li><em><strong>micrometer-observation</strong></em> ： 为spring应用程序提供可观察性支持</li></ul><p>第一个spring程序搭建完毕。</p><hr><h2 id="二、ioc-控制反转" tabindex="-1"><a class="header-anchor" href="#二、ioc-控制反转"><span>二、IoC（控制反转）</span></a></h2><h3 id="_2-1-ioc本质" tabindex="-1"><a class="header-anchor" href="#_2-1-ioc本质"><span>2.1 IoC本质</span></a></h3><p><em><strong>IoC</strong></em>（即Inversion of Control，简写为IoC），是一种设计思想，用来降低代码之间的耦合度。在过去我们编写程序的过程中，对象的创建和对象之间的依赖都由程序员决定，硬编码在程序中。<mark>而控制反转则是将对象的创建权和对象之间关系（依赖）的维护的权利都交出去，由IoC容器来负责。</mark></p><h3 id="_2-2-ioc初体验" tabindex="-1"><a class="header-anchor" href="#_2-2-ioc初体验"><span>2.2 IoC初体验</span></a></h3><p>首先我们引入JUnit依赖，方便进行测试，修改pom文件，再点击重新加载Maven项目，引入依赖。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>6.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-jupiter-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>首先我们需要定义一个Bean，或者说一个类（但是，必须注意这个类要有<code>无参构造函数</code>，这一点后面会细说）</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>jianwen</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>新建配置文件，并命名为<code>spring-demo</code></li></ul><figure><img src="`+k+`" alt="新建spring配置文件" tabindex="0" loading="lazy"><figcaption>新建spring配置文件</figcaption></figure><ul><li>在spring-demo.xml中配置Bean</li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.jianwen.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>测试</li></ul><p>在test目录下新建一个测试类TestUserBean</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestUserBean</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 关键字var是从Java 10引入的，允许允许在局部变量类型推断中使用</span>
        <span class="token comment">// 从而减少代码中的样板代码，提高可读性和简洁性。</span>
        <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;spring-demo.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> userBean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userBean&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userBean<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>点击方法左侧的启动三角形，得到如下结果</p><figure><img src="`+m+`" alt="image-20240208213804849" tabindex="0" loading="lazy"><figcaption>image-20240208213804849</figcaption></figure><p>事实证明，确实有一个User类的实例被创建出来了，而且不是我们程序员自己手动new出来的。下面我们来详细分析其背后的原理。</p><h3 id="_2-3-程序分析" tabindex="-1"><a class="header-anchor" href="#_2-3-程序分析"><span>2.3 程序分析</span></a></h3><p>在之前我们启动，并且成功运行了我们的程序。对比之前的开发，我们多做的事情无非就是</p><ul><li>引入了spring-context依赖，JUnit依赖（JUnit依赖是为了方便我们测试用的，可有可无！）</li><li>在resources目录下新建了一个spring-demo.xml的配置文件，并在配置文件中对Bean进行了配置。</li><li>书写了两行莫名其妙的代码</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;spring-demo.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span> userBean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userBean&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-1-spring-demo-xml配置文件" tabindex="-1"><a class="header-anchor" href="#_2-3-1-spring-demo-xml配置文件"><span>2.3.1 spring-demo.xml配置文件</span></a></h4><p>在spring-demo.xml文件中我们配置了一个bean，指定了它的id和class。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.jianwen.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>id属性可以理解为每一个Bean的<code>身份证</code>，能够<code>唯一标识</code>一个Bean。IoC容器可以根据id精确的找到相应的Bean，先前我们在测试类中书写的代码就是通过id寻找到对应的bean <ul><li>显然id是不能重复的，我们新建一个Admin类，然后再xml文件进行相应的配置</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>jianwen</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Admin</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.jianwen.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.jianwen.Admin<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实我们发现IDEA已经给了我们警告</p><figure><img src="`+v+'" alt="id重复的警告" tabindex="0" loading="lazy"><figcaption>id重复的警告</figcaption></figure><p>启动程序，得到如下结果：</p><figure><img src="'+b+`" alt="测试失败" tabindex="0" loading="lazy"><figcaption>测试失败</figcaption></figure><p>显然如果我们也不可能通过id获取一个不存在的bean。</p><p><mark>为了方便后续测试的正常运行我们先把第二个bean配置给删掉</mark></p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.jianwen.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>class属性则指明了这个Bean的类型（注意：后面必须跟全限定类名，即类所在的包名 + 类名），这样IoC容器才能知道到底要创建哪种类型的Bean</li></ul><h4 id="_2-3-2-两行代码" tabindex="-1"><a class="header-anchor" href="#_2-3-2-两行代码"><span>2.3.2 两行代码</span></a></h4><p>在 Spring 框架中，bean 的存储和管理方式是通过 bean 容器来实现的。Spring 提供了多种类型的 bean 容器，其中最常见的是 ApplicationContext 接口的各种实现，如 ClassPathXmlApplicationContext、AnnotationConfigApplicationContext 等。本例即使用ClassPathXmlApplicationContext。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;spring-demo.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span> userBean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userBean&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ClassPathXmlApplicationContext</code> 从类路径（classpath）中加载 XML 格式的配置文件，并根据配置文件中定义的内容创建应用程序上下文（即bean容器）。</p><p>spring-demo.xml作为参数传递给<code>ClassPathXmlApplicationContext</code>构造函数，指定spring应用程序上下文需要加载的XML配置文件的名称。其中值得一提的是spring配置文件的命名是可以自由发挥的，可以是spring-demo.xml也可以是spring.xml还可以是hahh.xml等等，取决于自己。并且通过观察源码我们可以看到实际上<code>ClassPathXmlApplicationContext</code>有一个构造函数是能够接收多个参数的，我们完全可以传多个xml文件，也就是说把多个配置文件中的bean加载到一个容器当中。</p><figure><img src="`+h+'" alt="构造函数" tabindex="0" loading="lazy"><figcaption>构造函数</figcaption></figure><p>spring通过解析spring-demo.xml文件，获得配置文件中配置的所有bean的全限定类名。然后spring底层通过反射，<mark>调用无参构造函数</mark>来创建对象（这就是前面提到的为什么必须要有无参构造函数！），最后存放在相应的spring容器中。第二行代码就是，在容器中通过id去获取一个bean。</p>',62);function q(_,y){const s=e("ExternalLinkIcon");return p(),i("div",null,[w,n("p",null,[n("a",f,[o("Spring Framework官方文档"),l(s)])]),S])}const j=t(x,[["render",q],["__file","Spring6.html.vue"]]),I=JSON.parse('{"path":"/posts/Java/Spring6.html","title":"Spring6","lang":"zh-CN","frontmatter":{"description":"Spring6 Static BadgeStatic BadgeStatic Badge JDK : 17 Spring：6.1.3 IDEA : 2023.2.2 MAVEN ：3.8.8 Spring Framework官方文档 一、Spring简述 事实上Spring这个词在不同的上下文中有着不同的含义，它可以用来指Spring Framewor...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/Blog/posts/Java/Spring6.html"}],["meta",{"property":"og:title","content":"Spring6"}],["meta",{"property":"og:description","content":"Spring6 Static BadgeStatic BadgeStatic Badge JDK : 17 Spring：6.1.3 IDEA : 2023.2.2 MAVEN ：3.8.8 Spring Framework官方文档 一、Spring简述 事实上Spring这个词在不同的上下文中有着不同的含义，它可以用来指Spring Framewor..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-08T14:37:18.000Z"}],["meta",{"property":"article:author","content":"jianwen"}],["meta",{"property":"article:modified_time","content":"2024-02-08T14:37:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring6\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-08T14:37:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"jianwen\\",\\"url\\":\\"https://catlordx.github.io/Blog/\\"}]}"]]},"headers":[{"level":2,"title":"一、Spring简述","slug":"一、spring简述","link":"#一、spring简述","children":[{"level":3,"title":"1.1 Spring Framework简介","slug":"_1-1-spring-framework简介","link":"#_1-1-spring-framework简介","children":[]},{"level":3,"title":"1.2 创建第一个Spring程序","slug":"_1-2-创建第一个spring程序","link":"#_1-2-创建第一个spring程序","children":[]}]},{"level":2,"title":"二、IoC（控制反转）","slug":"二、ioc-控制反转","link":"#二、ioc-控制反转","children":[{"level":3,"title":"2.1 IoC本质","slug":"_2-1-ioc本质","link":"#_2-1-ioc本质","children":[]},{"level":3,"title":"2.2 IoC初体验","slug":"_2-2-ioc初体验","link":"#_2-2-ioc初体验","children":[]},{"level":3,"title":"2.3 程序分析","slug":"_2-3-程序分析","link":"#_2-3-程序分析","children":[]}]}],"git":{"createdTime":1707403038000,"updatedTime":1707403038000,"contributors":[{"name":"jianwen","email":"shelly2140306@163.com","commits":1}]},"readingTime":{"minutes":7.39,"words":2216},"filePathRelative":"posts/Java/Spring6.md","localizedDate":"2024年2月8日","excerpt":"\\n<p><img alt=\\"Static Badge\\" src=\\"https://img.shields.io/badge/license-MIT-blue\\"><img alt=\\"Static Badge\\" src=\\"https://img.shields.io/badge/version-1.0.0-grenn\\"><img alt=\\"Static Badge\\" src=\\"https://img.shields.io/badge/Spring_Framework-6.1.3-green\\"></p>\\n<ul>\\n<li>JDK : 17</li>\\n<li>Spring：6.1.3</li>\\n<li>IDEA : 2023.2.2</li>\\n<li>MAVEN ：3.8.8</li>\\n</ul>","autoDesc":true}');export{j as comp,I as data};
