import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as t,c as r,f as n}from"./app-Gb9WsySS.js";const i={},e=n('<h1 id="springboot3" tabindex="-1"><a class="header-anchor" href="#springboot3"><span>SpringBoot3</span></a></h1><h2 id="_1-spring-boot简述" tabindex="-1"><a class="header-anchor" href="#_1-spring-boot简述"><span>1.Spring Boot简述</span></a></h2><p>Spring Boot 是一个用于创建基于 Spring 框架的应用程序的开发工具。它简化了基于 Spring 的应用程序的配置和部署过程，底层实际上仍然是spring。Spring Boot 提供了一组开箱即用的功能，包括自动配置、起步依赖、嵌入式 Web 服务器等，使开发人员<mark>可以更快地构建</mark> Spring 应用程序。</p><p>spring boot的主要特点：</p><ol><li><em><strong>开箱即用</strong></em>：springboot已经为项目配置提供了合理的默认值，可以直接拿来使用</li><li><em><strong>嵌入式 Web 服务器（Embedded Web Server）</strong></em>：Spring Boot 支持嵌入式的 Tomcat、Jetty 或 Undertow 等 Web 服务器，开发人员可以将应用程序打包成一个可执行的 JAR 文件，并直接运行，无需打成war包。</li><li><em><strong>Actuator</strong></em>：Spring Boot Actuator 提供了监控和管理 Spring Boot 应用程序的端点（endpoints），包括应用程序的健康状况、信息、指标等。</li><li><em><strong>简化的配置</strong></em>：Spring Boot 通过约定大于配置的理念，尽可能减少了配置文件的编写量，提供了默认的配置。</li><li><em><strong>灵活性</strong></em>：尽管 Spring Boot 提供了很多默认配置，但开发人员仍然可以根据需要自定义配置，并且可以轻松地覆盖默认配置。并且能够轻松整合别的框架，例如mybatis等。</li></ol><p><mark>简而言之：Spring Boot的出现就是为了简化spring的开发</mark></p><h2 id="二、spring-boot中的几个概念" tabindex="-1"><a class="header-anchor" href="#二、spring-boot中的几个概念"><span>二、Spring Boot中的几个概念</span></a></h2><h3 id="_2-1-启动器-starter" tabindex="-1"><a class="header-anchor" href="#_2-1-启动器-starter"><span>2.1 启动器（starter）</span></a></h3><p>在先前我们开发的时候，在某个场景一般会导入一些固定的依赖。例如我们在进行web开发的时候一般会引入spring MVC、jackson、servlet等依赖。而启动器相当于是把这些依赖打了个包，引入这一个依赖就会连带着把上述的依赖全部引入</p><p>![starter](./Spring Boot.assets/image-20240209172558619.png)</p><p>如图所示，我们引入了spring-boot-stater-web这一个依赖那么基本上web开发所需要的依赖都给导好了。</p><p>并且能够保证这些依赖之间不会发生冲突，自动进行<mark>相关的一些配置</mark>，减轻开发者的心智压力，专注于业务逻辑的实现。那么显而易见的是，这么做还可以快速启动和开发应用程序，并且很好的实现了模块化。使得应用程序的不同模块可以进行分离和解耦，提高了程序的可扩展性。</p><p>spring官方提供了很多预定义的启动器，例如spring-boot-starter-web，spring-boot-starter-security等等，一般命名为spring-boot-starter-xxx。</p><p>当然有官方提供的启动器也会有第三方提供的启动器，例如MybatisPlus提供的，mybatis-plus-spring-boot3-starter。</p><h3 id="_2-2-springbootapplication注解" tabindex="-1"><a class="header-anchor" href="#_2-2-springbootapplication注解"><span>2.2 @SpringBootApplication注解</span></a></h3><p>![SpringBootApplication注解](./Spring Boot.assets/image-20240209170945105.png)</p><p>我们可以看到SpringBootApplication这个注解主要实现了以下三个功能：</p><ul><li>自动配置：@EnableAutoConfiguration注解用于其中SpringBoot的自动配置机制。SpringBoot项目能够自动根据引入的启动器中的相关配置文件等来自动配置各种常见的配置和功能，让开发者省去大量手动配置的时间。</li><li>声明配置类：<code>@SpringBootConfiguration</code> 注解实际上是 Spring Boot 中的一个元注解，它本质上是 <code>@Configuration</code> 注解的派生。前面学习spring的时候我们都知道@Configuration注解，会把标注的类声明为配置类，进行相关的配置。</li><li>组件扫描：@SpringBootApplication中包含了@CoponentScan注解，它能够自动扫描程序中的组件，比如Controllers，Service，Repositories等，然后将其纳入Spring Boot应用程序的上下文。使用了@SpringBootApplication这个注解后被标注的类所在的包及其子包中的组件都会被纳入spring程序上下文中。</li></ul><h3 id="_2-3-springboot项目的依赖管理" tabindex="-1"><a class="header-anchor" href="#_2-3-springboot项目的依赖管理"><span>2.3 springboot项目的依赖管理</span></a></h3><p>我们注意到在一个Spring Boot项目中，很多依赖是不需要我们书写版本号的。这是因为每一个Spring Boot项目都有一个父项目spring-boot-starter-parent</p><p>![spring-boot-starter-parent](./Spring Boot.assets/image-20240209174003578.png)</p><p>spring-boot-starter-parent的父项目又是spring-boot-dependencies</p><p>![spring-boot-dependencies](./Spring Boot.assets/image-20240209174104600.png)</p><p>spring-boot-dependencies声明了所有常见的依赖的版本</p><p>![依赖版本](./Spring Boot.assets/image-20240209174241778.png)</p><p>![dependencyManagement](./Spring Boot.assets/image-20240209174341380.png)</p><h3 id="_2-4-配置文件" tabindex="-1"><a class="header-anchor" href="#_2-4-配置文件"><span>2.4 配置文件</span></a></h3><blockquote><p>前面我们已经提到了，Spring Boot项目会自动为我们进行开发所需的配置，但是默认的配置有时候可能不满足我们的需要，需要修改这些配置。例如Spring Boot项目启动后一般都是通过8080端口访问，但不巧的是你的电脑的8080已经被占用且不能关闭，那就需要修改我们项目所需要的端口。</p></blockquote><p>Spring Boot项目都会有一个默认配置文件application.properties在src/main/resource目录下。我们能够在这个文件中对项目进行统一的配置管理。</p><p>值得一提的是</p><ul><li>配置文件必须命名为application</li><li>文件格式可以为.yml，.properties，.yaml。</li><li>并且可以同时存在多个配置文件，但如果同时存在多个配置文件，.properties文件的优先级是最高的，剩下两种优先级相同。</li></ul>',31),p=[e];function a(s,g){return t(),r("div",null,p)}const m=o(i,[["render",a],["__file","Spring Boot.html.vue"]]),d=JSON.parse('{"path":"/posts/Java/Spring%20Boot.html","title":"SpringBoot3","lang":"zh-CN","frontmatter":{"description":"SpringBoot3 1.Spring Boot简述 Spring Boot 是一个用于创建基于 Spring 框架的应用程序的开发工具。它简化了基于 Spring 的应用程序的配置和部署过程，底层实际上仍然是spring。Spring Boot 提供了一组开箱即用的功能，包括自动配置、起步依赖、嵌入式 Web 服务器等，使开发人员可以更快地构建 S...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/Blog/posts/Java/Spring%20Boot.html"}],["meta",{"property":"og:title","content":"SpringBoot3"}],["meta",{"property":"og:description","content":"SpringBoot3 1.Spring Boot简述 Spring Boot 是一个用于创建基于 Spring 框架的应用程序的开发工具。它简化了基于 Spring 的应用程序的配置和部署过程，底层实际上仍然是spring。Spring Boot 提供了一组开箱即用的功能，包括自动配置、起步依赖、嵌入式 Web 服务器等，使开发人员可以更快地构建 S..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-31T14:00:11.000Z"}],["meta",{"property":"article:author","content":"jianwen"}],["meta",{"property":"article:modified_time","content":"2024-03-31T14:00:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot3\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-31T14:00:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"jianwen\\",\\"url\\":\\"https://catlordx.github.io/Blog/\\"}]}"]]},"headers":[{"level":2,"title":"1.Spring Boot简述","slug":"_1-spring-boot简述","link":"#_1-spring-boot简述","children":[]},{"level":2,"title":"二、Spring Boot中的几个概念","slug":"二、spring-boot中的几个概念","link":"#二、spring-boot中的几个概念","children":[{"level":3,"title":"2.1 启动器（starter）","slug":"_2-1-启动器-starter","link":"#_2-1-启动器-starter","children":[]},{"level":3,"title":"2.2 @SpringBootApplication注解","slug":"_2-2-springbootapplication注解","link":"#_2-2-springbootapplication注解","children":[]},{"level":3,"title":"2.3 springboot项目的依赖管理","slug":"_2-3-springboot项目的依赖管理","link":"#_2-3-springboot项目的依赖管理","children":[]},{"level":3,"title":"2.4 配置文件","slug":"_2-4-配置文件","link":"#_2-4-配置文件","children":[]}]}],"git":{"createdTime":1711893611000,"updatedTime":1711893611000,"contributors":[{"name":"jianwen","email":"shelly2140306@163.com","commits":1}]},"readingTime":{"minutes":4.35,"words":1304},"filePathRelative":"posts/Java/Spring Boot.md","localizedDate":"2024年3月31日","excerpt":"\\n<h2>1.Spring Boot简述</h2>\\n<p>Spring Boot 是一个用于创建基于 Spring 框架的应用程序的开发工具。它简化了基于 Spring 的应用程序的配置和部署过程，底层实际上仍然是spring。Spring Boot 提供了一组开箱即用的功能，包括自动配置、起步依赖、嵌入式 Web 服务器等，使开发人员<mark>可以更快地构建</mark> Spring 应用程序。</p>\\n<p>spring boot的主要特点：</p>\\n<ol>\\n<li><em><strong>开箱即用</strong></em>：springboot已经为项目配置提供了合理的默认值，可以直接拿来使用</li>\\n<li><em><strong>嵌入式 Web 服务器（Embedded Web Server）</strong></em>：Spring Boot 支持嵌入式的 Tomcat、Jetty 或 Undertow 等 Web 服务器，开发人员可以将应用程序打包成一个可执行的 JAR 文件，并直接运行，无需打成war包。</li>\\n<li><em><strong>Actuator</strong></em>：Spring Boot Actuator 提供了监控和管理 Spring Boot 应用程序的端点（endpoints），包括应用程序的健康状况、信息、指标等。</li>\\n<li><em><strong>简化的配置</strong></em>：Spring Boot 通过约定大于配置的理念，尽可能减少了配置文件的编写量，提供了默认的配置。</li>\\n<li><em><strong>灵活性</strong></em>：尽管 Spring Boot 提供了很多默认配置，但开发人员仍然可以根据需要自定义配置，并且可以轻松地覆盖默认配置。并且能够轻松整合别的框架，例如mybatis等。</li>\\n</ol>","autoDesc":true}');export{m as comp,d as data};
